# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: p2p.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import primitive_pb2 as primitive__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\tp2p.proto\x12\x03p2p\x1a\x0fprimitive.proto\"\x81\x01\n\x08Metadata\x12\x0f\n\x07peer_id\x18\x01 \x02(\x04\x12\x0c\n\x04\x61\x64\x64r\x18\x02 \x02(\t\x12&\n\tconn_type\x18\x03 \x02(\x0e\x32\x13.primitive.ConnType\x12\x0f\n\x07\x63ommand\x18\x04 \x02(\t\x12\x0f\n\x07inbound\x18\x05 \x02(\x08\x12\x0c\n\x04size\x18\x06 \x02(\x04\"\xcd\t\n\x07Message\x12\x1b\n\x04meta\x18\x01 \x02(\x0b\x32\r.p2p.Metadata\x12\x19\n\x04ping\x18\x02 \x01(\x0b\x32\t.p2p.PingH\x00\x12\x19\n\x04pong\x18\x03 \x01(\x0b\x32\t.p2p.PongH\x00\x12\x17\n\x03inv\x18\x04 \x01(\x0b\x32\x08.p2p.InvH\x00\x12\x1f\n\x07getdata\x18\x05 \x01(\x0b\x32\x0c.p2p.GetDataH\x00\x12\x15\n\x02tx\x18\x06 \x01(\x0b\x32\x07.p2p.TxH\x00\x12\x1f\n\x07headers\x18\x07 \x01(\x0b\x32\x0c.p2p.HeadersH\x00\x12\x19\n\x04\x61\x64\x64r\x18\x08 \x01(\x0b\x32\t.p2p.AddrH\x00\x12\x1d\n\x06\x61\x64\x64rv2\x18\t \x01(\x0b\x32\x0b.p2p.AddrV2H\x00\x12#\n\tfeefilter\x18\n \x01(\x0b\x32\x0e.p2p.FeeFilterH\x00\x12%\n\ngetheaders\x18\x0b \x01(\x0b\x32\x0f.p2p.GetHeadersH\x00\x12#\n\tgetblocks\x18\x0c \x01(\x0b\x32\x0e.p2p.GetBlocksH\x00\x12\x1f\n\x07version\x18\r \x01(\x0b\x32\x0c.p2p.VersionH\x00\x12!\n\x08notfound\x18\x0e \x01(\x0b\x32\r.p2p.NotFoundH\x00\x12\x1d\n\x06reject\x18\x0f \x01(\x0b\x32\x0b.p2p.RejectH\x00\x12)\n\x0c\x63ompactblock\x18\x10 \x01(\x0b\x32\x11.p2p.CompactBlockH\x00\x12\'\n\x0bsendcompact\x18\x11 \x01(\x0b\x32\x10.p2p.SendCompactH\x00\x12\x1b\n\x05\x62lock\x18\x12 \x01(\x0b\x32\n.p2p.BlockH\x00\x12\'\n\x0bgetblocktxn\x18\x13 \x01(\x0b\x32\x10.p2p.GetBlockTxnH\x00\x12!\n\x08\x62locktxn\x18\x14 \x01(\x0b\x32\r.p2p.BlockTxnH\x00\x12\x1b\n\x05\x61lert\x18\x15 \x01(\x0b\x32\n.p2p.AlertH\x00\x12#\n\tfilteradd\x18\x16 \x01(\x0b\x32\x0e.p2p.FilterAddH\x00\x12%\n\nfilterload\x18\x17 \x01(\x0b\x32\x0f.p2p.FilterLoadH\x00\x12)\n\x0cgetcfcheckpt\x18\x18 \x01(\x0b\x32\x11.p2p.GetCFCheckptH\x00\x12#\n\tcfheaders\x18\x19 \x01(\x0b\x32\x0e.p2p.CFHeadersH\x00\x12\x1f\n\x07\x63\x66ilter\x18\x1a \x01(\x0b\x32\x0c.p2p.CFilterH\x00\x12#\n\tcfcheckpt\x18\x1b \x01(\x0b\x32\x0e.p2p.CFCheckptH\x00\x12)\n\x0cgetcfheaders\x18\x1c \x01(\x0b\x32\x11.p2p.GetCFHeadersH\x00\x12%\n\ngetcfilter\x18\x1d \x01(\x0b\x32\x0f.p2p.GetCFilterH\x00\x12\'\n\x0bmerkleblock\x18\x1e \x01(\x0b\x32\x10.p2p.MerkleBlockH\x00\x12\x1f\n\x07unknown\x18\x1f \x01(\x0b\x32\x0c.p2p.UnknownH\x00\x12\x10\n\x06verack\x18  \x01(\x08H\x00\x12\x15\n\x0bsendheaders\x18! \x01(\x08H\x00\x12\x11\n\x07getaddr\x18\" \x01(\x08H\x00\x12\x11\n\x07mempool\x18# \x01(\x08H\x00\x12\x14\n\nwtxidrelay\x18$ \x01(\x08H\x00\x12\x14\n\nsendaddrv2\x18% \x01(\x08H\x00\x12\x15\n\x0b\x66ilterclear\x18& \x01(\x08H\x00\x42\x05\n\x03msg\"\x15\n\x04Ping\x12\r\n\x05value\x18\x01 \x02(\x06\"\x15\n\x04Pong\x12\r\n\x05value\x18\x01 \x02(\x06\".\n\x03Inv\x12\'\n\x05items\x18\x01 \x03(\x0b\x32\x18.primitive.InventoryItem\"3\n\x08NotFound\x12\'\n\x05items\x18\x01 \x03(\x0b\x32\x18.primitive.InventoryItem\"\x8f\x01\n\x0c\x43ompactBlock\x12&\n\x06header\x18\x01 \x02(\x0b\x32\x16.primitive.BlockHeader\x12\r\n\x05nonce\x18\x02 \x02(\x04\x12\x11\n\tshort_ids\x18\x03 \x03(\x0c\x12\x35\n\x0ctransactions\x18\x04 \x03(\x0b\x32\x1f.primitive.PrefilledTransaction\"(\n\x02Tx\x12\"\n\x02tx\x18\x01 \x02(\x0b\x32\x16.primitive.Transaction\"2\n\x07GetData\x12\'\n\x05items\x18\x01 \x03(\x0b\x32\x18.primitive.InventoryItem\"2\n\x07Headers\x12\'\n\x07headers\x18\x01 \x03(\x0b\x32\x16.primitive.BlockHeader\"5\n\x0bGetBlockTxn\x12\x12\n\nblock_hash\x18\x01 \x02(\x0c\x12\x12\n\ntx_indexes\x18\x02 \x03(\x04\"L\n\x08\x42lockTxn\x12\x12\n\nblock_hash\x18\x01 \x02(\x0c\x12,\n\x0ctransactions\x18\x02 \x03(\x0b\x32\x16.primitive.Transaction\"\x16\n\x05\x41lert\x12\r\n\x05\x61lert\x18\x01 \x02(\x0c\"-\n\x04\x41\x64\x64r\x12%\n\taddresses\x18\x01 \x03(\x0b\x32\x12.primitive.Address\"/\n\x06\x41\x64\x64rV2\x12%\n\taddresses\x18\x01 \x03(\x0b\x32\x12.primitive.Address\"\xef\x01\n\x06Reject\x12\x18\n\x10rejected_command\x18\x01 \x02(\t\x12(\n\x06reason\x18\x02 \x02(\x0e\x32\x18.p2p.Reject.RejectReason\x12\x16\n\x0ereason_details\x18\x03 \x02(\t\x12\x0c\n\x04hash\x18\x04 \x02(\x0c\"{\n\x0cRejectReason\x12\r\n\tMALFORMED\x10\x00\x12\x0b\n\x07INVALID\x10\x01\x12\x0c\n\x08OBSOLETE\x10\x02\x12\r\n\tDUPLICATE\x10\x03\x12\x0f\n\x0bNONSTANDARD\x10\x04\x12\x08\n\x04\x44UST\x10\x05\x12\x07\n\x03\x46\x45\x45\x10\x06\x12\x0e\n\nCHECKPOINT\x10\x07\"4\n\x0bSendCompact\x12\x14\n\x0csend_compact\x18\x01 \x02(\x08\x12\x0f\n\x07version\x18\x02 \x02(\x04\"\x18\n\tFeeFilter\x12\x0b\n\x03\x66\x65\x65\x18\x01 \x02(\x12\"H\n\nGetHeaders\x12\x0f\n\x07version\x18\x01 \x02(\r\x12\x16\n\x0elocator_hashes\x18\x02 \x03(\x0c\x12\x11\n\tstop_hash\x18\x03 \x02(\x0c\"G\n\tGetBlocks\x12\x0f\n\x07version\x18\x01 \x02(\r\x12\x16\n\x0elocator_hashes\x18\x02 \x03(\x0c\x12\x11\n\tstop_hash\x18\x03 \x02(\x0c\"\xd1\x01\n\x07Version\x12\x0f\n\x07version\x18\x01 \x02(\r\x12\x10\n\x08services\x18\x02 \x02(\x04\x12\x11\n\ttimestamp\x18\x03 \x02(\x12\x12$\n\x08receiver\x18\x04 \x02(\x0b\x32\x12.primitive.Address\x12\"\n\x06sender\x18\x05 \x02(\x0b\x32\x12.primitive.Address\x12\r\n\x05nonce\x18\x06 \x02(\x04\x12\x12\n\nuser_agent\x18\x07 \x02(\t\x12\x14\n\x0cstart_height\x18\x08 \x02(\x11\x12\r\n\x05relay\x18\t \x02(\x08\"]\n\x05\x42lock\x12&\n\x06header\x18\x01 \x02(\x0b\x32\x16.primitive.BlockHeader\x12,\n\x0ctransactions\x18\x02 \x03(\x0b\x32\x16.primitive.Transaction\"\x1b\n\tFilterAdd\x12\x0e\n\x06\x66ilter\x18\x01 \x02(\x0c\"\x9b\x01\n\nFilterLoad\x12\x0e\n\x06\x66ilter\x18\x01 \x02(\x0c\x12\x12\n\nhash_funcs\x18\x02 \x02(\r\x12\r\n\x05tweak\x18\x03 \x02(\r\x12)\n\x05\x66lags\x18\x04 \x02(\x0e\x32\x1a.p2p.FilterLoad.BloomFlags\"/\n\nBloomFlags\x12\x08\n\x04None\x10\x00\x12\x07\n\x03\x41ll\x10\x01\x12\x0e\n\nPubkeyOnly\x10\x02\"6\n\x0cGetCFCheckpt\x12\x13\n\x0b\x66ilter_type\x18\x01 \x02(\r\x12\x11\n\tstop_hash\x18\x02 \x02(\x0c\"K\n\tCFCheckpt\x12\x13\n\x0b\x66ilter_type\x18\x01 \x02(\r\x12\x11\n\tstop_hash\x18\x02 \x02(\x0c\x12\x16\n\x0e\x66ilter_headers\x18\x03 \x03(\x0c\"L\n\x0cGetCFHeaders\x12\x13\n\x0b\x66ilter_type\x18\x01 \x02(\r\x12\x14\n\x0cstart_height\x18\x02 \x02(\r\x12\x11\n\tstop_hash\x18\x03 \x02(\x0c\"j\n\tCFHeaders\x12\x13\n\x0b\x66ilter_type\x18\x01 \x02(\r\x12\x11\n\tstop_hash\x18\x02 \x02(\x0c\x12\x1e\n\x16previous_filter_header\x18\x03 \x02(\x0c\x12\x15\n\rfilter_hashes\x18\x04 \x03(\x0c\"J\n\nGetCFilter\x12\x13\n\x0b\x66ilter_type\x18\x01 \x02(\r\x12\x14\n\x0cstart_height\x18\x02 \x02(\r\x12\x11\n\tstop_hash\x18\x03 \x02(\x0c\"B\n\x07\x43\x46ilter\x12\x13\n\x0b\x66ilter_type\x18\x01 \x02(\r\x12\x12\n\nblock_hash\x18\x02 \x02(\x0c\x12\x0e\n\x06\x66ilter\x18\x03 \x02(\x0c\"m\n\x0bMerkleBlock\x12&\n\x06header\x18\x01 \x02(\x0b\x32\x16.primitive.BlockHeader\x12\x18\n\x10num_transactions\x18\x02 \x02(\r\x12\x0c\n\x04\x62its\x18\x03 \x03(\x08\x12\x0e\n\x06hashes\x18\x04 \x03(\x0c\"+\n\x07Unknown\x12\x0f\n\x07\x63ommand\x18\x01 \x02(\t\x12\x0f\n\x07payload\x18\x02 \x02(\x0c')



_METADATA = DESCRIPTOR.message_types_by_name['Metadata']
_MESSAGE = DESCRIPTOR.message_types_by_name['Message']
_PING = DESCRIPTOR.message_types_by_name['Ping']
_PONG = DESCRIPTOR.message_types_by_name['Pong']
_INV = DESCRIPTOR.message_types_by_name['Inv']
_NOTFOUND = DESCRIPTOR.message_types_by_name['NotFound']
_COMPACTBLOCK = DESCRIPTOR.message_types_by_name['CompactBlock']
_TX = DESCRIPTOR.message_types_by_name['Tx']
_GETDATA = DESCRIPTOR.message_types_by_name['GetData']
_HEADERS = DESCRIPTOR.message_types_by_name['Headers']
_GETBLOCKTXN = DESCRIPTOR.message_types_by_name['GetBlockTxn']
_BLOCKTXN = DESCRIPTOR.message_types_by_name['BlockTxn']
_ALERT = DESCRIPTOR.message_types_by_name['Alert']
_ADDR = DESCRIPTOR.message_types_by_name['Addr']
_ADDRV2 = DESCRIPTOR.message_types_by_name['AddrV2']
_REJECT = DESCRIPTOR.message_types_by_name['Reject']
_SENDCOMPACT = DESCRIPTOR.message_types_by_name['SendCompact']
_FEEFILTER = DESCRIPTOR.message_types_by_name['FeeFilter']
_GETHEADERS = DESCRIPTOR.message_types_by_name['GetHeaders']
_GETBLOCKS = DESCRIPTOR.message_types_by_name['GetBlocks']
_VERSION = DESCRIPTOR.message_types_by_name['Version']
_BLOCK = DESCRIPTOR.message_types_by_name['Block']
_FILTERADD = DESCRIPTOR.message_types_by_name['FilterAdd']
_FILTERLOAD = DESCRIPTOR.message_types_by_name['FilterLoad']
_GETCFCHECKPT = DESCRIPTOR.message_types_by_name['GetCFCheckpt']
_CFCHECKPT = DESCRIPTOR.message_types_by_name['CFCheckpt']
_GETCFHEADERS = DESCRIPTOR.message_types_by_name['GetCFHeaders']
_CFHEADERS = DESCRIPTOR.message_types_by_name['CFHeaders']
_GETCFILTER = DESCRIPTOR.message_types_by_name['GetCFilter']
_CFILTER = DESCRIPTOR.message_types_by_name['CFilter']
_MERKLEBLOCK = DESCRIPTOR.message_types_by_name['MerkleBlock']
_UNKNOWN = DESCRIPTOR.message_types_by_name['Unknown']
_REJECT_REJECTREASON = _REJECT.enum_types_by_name['RejectReason']
_FILTERLOAD_BLOOMFLAGS = _FILTERLOAD.enum_types_by_name['BloomFlags']
Metadata = _reflection.GeneratedProtocolMessageType('Metadata', (_message.Message,), {
  'DESCRIPTOR' : _METADATA,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Metadata)
  })
_sym_db.RegisterMessage(Metadata)

Message = _reflection.GeneratedProtocolMessageType('Message', (_message.Message,), {
  'DESCRIPTOR' : _MESSAGE,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Message)
  })
_sym_db.RegisterMessage(Message)

Ping = _reflection.GeneratedProtocolMessageType('Ping', (_message.Message,), {
  'DESCRIPTOR' : _PING,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Ping)
  })
_sym_db.RegisterMessage(Ping)

Pong = _reflection.GeneratedProtocolMessageType('Pong', (_message.Message,), {
  'DESCRIPTOR' : _PONG,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Pong)
  })
_sym_db.RegisterMessage(Pong)

Inv = _reflection.GeneratedProtocolMessageType('Inv', (_message.Message,), {
  'DESCRIPTOR' : _INV,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Inv)
  })
_sym_db.RegisterMessage(Inv)

NotFound = _reflection.GeneratedProtocolMessageType('NotFound', (_message.Message,), {
  'DESCRIPTOR' : _NOTFOUND,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.NotFound)
  })
_sym_db.RegisterMessage(NotFound)

CompactBlock = _reflection.GeneratedProtocolMessageType('CompactBlock', (_message.Message,), {
  'DESCRIPTOR' : _COMPACTBLOCK,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.CompactBlock)
  })
_sym_db.RegisterMessage(CompactBlock)

Tx = _reflection.GeneratedProtocolMessageType('Tx', (_message.Message,), {
  'DESCRIPTOR' : _TX,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Tx)
  })
_sym_db.RegisterMessage(Tx)

GetData = _reflection.GeneratedProtocolMessageType('GetData', (_message.Message,), {
  'DESCRIPTOR' : _GETDATA,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.GetData)
  })
_sym_db.RegisterMessage(GetData)

Headers = _reflection.GeneratedProtocolMessageType('Headers', (_message.Message,), {
  'DESCRIPTOR' : _HEADERS,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Headers)
  })
_sym_db.RegisterMessage(Headers)

GetBlockTxn = _reflection.GeneratedProtocolMessageType('GetBlockTxn', (_message.Message,), {
  'DESCRIPTOR' : _GETBLOCKTXN,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.GetBlockTxn)
  })
_sym_db.RegisterMessage(GetBlockTxn)

BlockTxn = _reflection.GeneratedProtocolMessageType('BlockTxn', (_message.Message,), {
  'DESCRIPTOR' : _BLOCKTXN,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.BlockTxn)
  })
_sym_db.RegisterMessage(BlockTxn)

Alert = _reflection.GeneratedProtocolMessageType('Alert', (_message.Message,), {
  'DESCRIPTOR' : _ALERT,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Alert)
  })
_sym_db.RegisterMessage(Alert)

Addr = _reflection.GeneratedProtocolMessageType('Addr', (_message.Message,), {
  'DESCRIPTOR' : _ADDR,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Addr)
  })
_sym_db.RegisterMessage(Addr)

AddrV2 = _reflection.GeneratedProtocolMessageType('AddrV2', (_message.Message,), {
  'DESCRIPTOR' : _ADDRV2,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.AddrV2)
  })
_sym_db.RegisterMessage(AddrV2)

Reject = _reflection.GeneratedProtocolMessageType('Reject', (_message.Message,), {
  'DESCRIPTOR' : _REJECT,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Reject)
  })
_sym_db.RegisterMessage(Reject)

SendCompact = _reflection.GeneratedProtocolMessageType('SendCompact', (_message.Message,), {
  'DESCRIPTOR' : _SENDCOMPACT,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.SendCompact)
  })
_sym_db.RegisterMessage(SendCompact)

FeeFilter = _reflection.GeneratedProtocolMessageType('FeeFilter', (_message.Message,), {
  'DESCRIPTOR' : _FEEFILTER,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.FeeFilter)
  })
_sym_db.RegisterMessage(FeeFilter)

GetHeaders = _reflection.GeneratedProtocolMessageType('GetHeaders', (_message.Message,), {
  'DESCRIPTOR' : _GETHEADERS,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.GetHeaders)
  })
_sym_db.RegisterMessage(GetHeaders)

GetBlocks = _reflection.GeneratedProtocolMessageType('GetBlocks', (_message.Message,), {
  'DESCRIPTOR' : _GETBLOCKS,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.GetBlocks)
  })
_sym_db.RegisterMessage(GetBlocks)

Version = _reflection.GeneratedProtocolMessageType('Version', (_message.Message,), {
  'DESCRIPTOR' : _VERSION,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Version)
  })
_sym_db.RegisterMessage(Version)

Block = _reflection.GeneratedProtocolMessageType('Block', (_message.Message,), {
  'DESCRIPTOR' : _BLOCK,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Block)
  })
_sym_db.RegisterMessage(Block)

FilterAdd = _reflection.GeneratedProtocolMessageType('FilterAdd', (_message.Message,), {
  'DESCRIPTOR' : _FILTERADD,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.FilterAdd)
  })
_sym_db.RegisterMessage(FilterAdd)

FilterLoad = _reflection.GeneratedProtocolMessageType('FilterLoad', (_message.Message,), {
  'DESCRIPTOR' : _FILTERLOAD,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.FilterLoad)
  })
_sym_db.RegisterMessage(FilterLoad)

GetCFCheckpt = _reflection.GeneratedProtocolMessageType('GetCFCheckpt', (_message.Message,), {
  'DESCRIPTOR' : _GETCFCHECKPT,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.GetCFCheckpt)
  })
_sym_db.RegisterMessage(GetCFCheckpt)

CFCheckpt = _reflection.GeneratedProtocolMessageType('CFCheckpt', (_message.Message,), {
  'DESCRIPTOR' : _CFCHECKPT,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.CFCheckpt)
  })
_sym_db.RegisterMessage(CFCheckpt)

GetCFHeaders = _reflection.GeneratedProtocolMessageType('GetCFHeaders', (_message.Message,), {
  'DESCRIPTOR' : _GETCFHEADERS,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.GetCFHeaders)
  })
_sym_db.RegisterMessage(GetCFHeaders)

CFHeaders = _reflection.GeneratedProtocolMessageType('CFHeaders', (_message.Message,), {
  'DESCRIPTOR' : _CFHEADERS,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.CFHeaders)
  })
_sym_db.RegisterMessage(CFHeaders)

GetCFilter = _reflection.GeneratedProtocolMessageType('GetCFilter', (_message.Message,), {
  'DESCRIPTOR' : _GETCFILTER,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.GetCFilter)
  })
_sym_db.RegisterMessage(GetCFilter)

CFilter = _reflection.GeneratedProtocolMessageType('CFilter', (_message.Message,), {
  'DESCRIPTOR' : _CFILTER,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.CFilter)
  })
_sym_db.RegisterMessage(CFilter)

MerkleBlock = _reflection.GeneratedProtocolMessageType('MerkleBlock', (_message.Message,), {
  'DESCRIPTOR' : _MERKLEBLOCK,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.MerkleBlock)
  })
_sym_db.RegisterMessage(MerkleBlock)

Unknown = _reflection.GeneratedProtocolMessageType('Unknown', (_message.Message,), {
  'DESCRIPTOR' : _UNKNOWN,
  '__module__' : 'p2p_pb2'
  # @@protoc_insertion_point(class_scope:p2p.Unknown)
  })
_sym_db.RegisterMessage(Unknown)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _METADATA._serialized_start=36
  _METADATA._serialized_end=165
  _MESSAGE._serialized_start=168
  _MESSAGE._serialized_end=1397
  _PING._serialized_start=1399
  _PING._serialized_end=1420
  _PONG._serialized_start=1422
  _PONG._serialized_end=1443
  _INV._serialized_start=1445
  _INV._serialized_end=1491
  _NOTFOUND._serialized_start=1493
  _NOTFOUND._serialized_end=1544
  _COMPACTBLOCK._serialized_start=1547
  _COMPACTBLOCK._serialized_end=1690
  _TX._serialized_start=1692
  _TX._serialized_end=1732
  _GETDATA._serialized_start=1734
  _GETDATA._serialized_end=1784
  _HEADERS._serialized_start=1786
  _HEADERS._serialized_end=1836
  _GETBLOCKTXN._serialized_start=1838
  _GETBLOCKTXN._serialized_end=1891
  _BLOCKTXN._serialized_start=1893
  _BLOCKTXN._serialized_end=1969
  _ALERT._serialized_start=1971
  _ALERT._serialized_end=1993
  _ADDR._serialized_start=1995
  _ADDR._serialized_end=2040
  _ADDRV2._serialized_start=2042
  _ADDRV2._serialized_end=2089
  _REJECT._serialized_start=2092
  _REJECT._serialized_end=2331
  _REJECT_REJECTREASON._serialized_start=2208
  _REJECT_REJECTREASON._serialized_end=2331
  _SENDCOMPACT._serialized_start=2333
  _SENDCOMPACT._serialized_end=2385
  _FEEFILTER._serialized_start=2387
  _FEEFILTER._serialized_end=2411
  _GETHEADERS._serialized_start=2413
  _GETHEADERS._serialized_end=2485
  _GETBLOCKS._serialized_start=2487
  _GETBLOCKS._serialized_end=2558
  _VERSION._serialized_start=2561
  _VERSION._serialized_end=2770
  _BLOCK._serialized_start=2772
  _BLOCK._serialized_end=2865
  _FILTERADD._serialized_start=2867
  _FILTERADD._serialized_end=2894
  _FILTERLOAD._serialized_start=2897
  _FILTERLOAD._serialized_end=3052
  _FILTERLOAD_BLOOMFLAGS._serialized_start=3005
  _FILTERLOAD_BLOOMFLAGS._serialized_end=3052
  _GETCFCHECKPT._serialized_start=3054
  _GETCFCHECKPT._serialized_end=3108
  _CFCHECKPT._serialized_start=3110
  _CFCHECKPT._serialized_end=3185
  _GETCFHEADERS._serialized_start=3187
  _GETCFHEADERS._serialized_end=3263
  _CFHEADERS._serialized_start=3265
  _CFHEADERS._serialized_end=3371
  _GETCFILTER._serialized_start=3373
  _GETCFILTER._serialized_end=3447
  _CFILTER._serialized_start=3449
  _CFILTER._serialized_end=3515
  _MERKLEBLOCK._serialized_start=3517
  _MERKLEBLOCK._serialized_end=3626
  _UNKNOWN._serialized_start=3628
  _UNKNOWN._serialized_end=3671
# @@protoc_insertion_point(module_scope)
