syntax = "proto2";

package connection;

import "primitive.proto";

message ConnectionEvent {
  oneof event {
    ClosedConnection closed = 1;
    EvictedConnection evicted = 2;
    InboundConnection inbound = 3;
    OutboundConnection outbound = 4;
    MisbehavingConnection misbehaving = 5;
  }
}

// Networks connections can be on.
// Don't remove networks here, even if they are removed in Bitcoin Core.
// This breaks backwards compatibllity.
enum Network {
  unknown = 0;
  ipv4 = 1;
  ipv6 = 2;
  onion = 3;
  i2p = 4;
  cjdns = 5;
  unroutable = 6;
  internal = 7;
}

// A P2P connection between two peers.
message Connection {
  required uint64  peer_id                 = 1;  // Peer id assigned by Bitcoin Core
  required string  addr                    = 2;  // Address of the peer
  required primitive.ConnType conn_type    = 3;  // Connection type
  required Network  network                = 4;  // The network this connection is on
  required uint64  net_group               = 5;  // The net_group assigend by Bitcoin Core
}

// A connection where the underlying socket has been closed.
message ClosedConnection {
  required Connection conn = 1;
  required uint64 time_established = 2; // Connection established UNIX epoch timestamp
}

// A connection that Bitcoin Core choose to evict.
message EvictedConnection {
  required Connection conn = 1;
  required uint64 time_established = 2; // Connection established UNIX epoch timestamp
}

// An inbound connection.
message InboundConnection {
  required Connection conn = 1;
  required uint64 existing_connections = 2;
}

// An outbound connection.
message OutboundConnection {
  required Connection conn = 1;
  required uint64 existing_connections = 2;
}

// A connection that Bitcoin Core thinks is misbehaving.
message MisbehavingConnection {
  required uint64 id = 1;
  required int32 score_before = 2;
  required int32 score_increase = 3;
  required string xmessage = 4;
  required bool threshold_exceeded = 5;
}
