name: build (ubuntu)

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Install build dependecies
      run: |
        sudo apt update -y
        sudo apt-get install -y \
          protobuf-compiler \
          libelf-dev \
          clang \
          llvm \
          llvm-14 \
          zstd \
          binutils-dev \
          elfutils \
          gcc-multilib \
    - name: Install integration test dependecies
      run: |
        sudo apt-get install -y \
          nats-server
    - uses: actions/checkout@v5
    - name: Build
      run: cargo build --all-features
    - name: Run tests and integration tests
      run: NATS_SERVER_BINARY=$(which nats-server) cargo test --all-features
    - name: Run cargo fmt
      run: cargo fmt --all -- --check

    - name: Check help output of each tool (auto-detected)
      run: |
        set -e

        # Extract tool names from Cargo.toml
        TOOLS=$(grep -oP '(?<=^  ")tools/[^"]+(?=")' Cargo.toml | sed 's|tools/||')

        MISSING=0

        for TOOL in $TOOLS; do
          MANIFEST="tools/$TOOL/Cargo.toml"
          README="tools/$TOOL/README.md"

          echo "🔍 Checking tool: $TOOL"

          if [ ! -f "$MANIFEST" ]; then
            echo "::error file=$MANIFEST::Cargo.toml not found for tool $TOOL"
            MISSING=1
            continue
          fi

          if [ ! -f "$README" ]; then
            echo "::error file=$README::README.md not found for tool $TOOL"
            MISSING=1
            continue
          fi

          HELP_OUTPUT=$(cargo run --quiet --manifest-path "$MANIFEST" -- --help)

          MISSING_LINES=0
          while IFS= read -r line; do
            if ! grep -Fq "$line" "$README"; then
              echo "::warning file=$README::Missing line in README for $TOOL: $line"
              MISSING_LINES=1
            fi
          done <<< "$HELP_OUTPUT"

          if [ "$MISSING_LINES" -ne 0 ]; then
            echo "::error file=$README::Some help lines for '$TOOL' are missing in its README"
            echo "📢 Have you forgotten to update the documentation for $TOOL?"
            MISSING=1
          fi
        done

        if [ "$MISSING" -ne 0 ]; then
          echo "❌ Documentation mismatch detected."
          exit 1
        else
          echo "✅ All help outputs are documented correctly."
        fi


    - name: Check help output of each extractor (auto-detected)
      run: |
        set -e

        # Extract "extractor" names from Cargo.toml
        EXTRACTORS=$(grep -oP '(?<=^  ")extractors/[^"]+(?=")' Cargo.toml | sed 's|extractors/||')

        MISSING=0

        for EXTRACTOR in $EXTRACTORS; do
          MANIFEST="extractors/$EXTRACTOR/Cargo.toml"
          README="extractors/$EXTRACTOR/README.md"

          echo "🔍 Checking extractor: $EXTRACTOR"

          if [ ! -f "$MANIFEST" ]; then
            echo "::error file=$MANIFEST::Cargo.toml not found for extractor $EXTRACTOR"
            MISSING=1
            continue
          fi

          if [ ! -f "$README" ]; then
            echo "::error file=$README::README.md not found for extractor $EXTRACTOR"
            MISSING=1
            continue
          fi

          HELP_OUTPUT=$(cargo run --quiet --manifest-path "$MANIFEST" -- --help)

          MISSING_LINES=0
          while IFS= read -r line; do
            if ! grep -Fq "$line" "$README"; then
              echo "::warning file=$README::Missing line in README for $EXTRACTOR: $line"
              MISSING_LINES=1
            fi
          done <<< "$HELP_OUTPUT"

          if [ "$MISSING_LINES" -ne 0 ]; then
            echo "::error file=$README::Some help lines for '$EXTRACTOR' are missing in its README"
            echo "📢 Have you forgotten to update the documentation for $extractor?"
            MISSING=1
          fi
        done

        if [ "$MISSING" -ne 0 ]; then
          echo "❌ Documentation mismatch detected."
          exit 1
        else
          echo "✅ All help outputs are documented correctly."
        fi
