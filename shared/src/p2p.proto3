syntax = "proto3";

package p2p;

// Metadata for a P2P message.
message Metadata {
  uint64  peer_id                 = 1;  // Peer id assigned by Bitcoin Core
  string  addr                    = 2;  // Address of the peer
  ConnType conn_type = 3;
  enum ConnType {
    Unknown = 0;
    Inbound = 1;
    OutboundFullRelay = 2;
    BlockRelayOnly = 3;
    Feeler = 4;
  }
  string  command                 = 4;  // Command or message type
  bool    inbound                 = 5;  // Message direction
  uint64  size                    = 6;  // Serialized message size
  uint64  timestamp               = 7;  // Timestamp (seconds since UNIX epoch) when the message was received.
  uint32  timestamp_subsec_micros = 8;  // The fractional part of the timestamp, in whole milliseconds. Always represents a fractional portion of a second (i.e., it is less than one million).
}

// A P2P message.
message Message {
  Metadata meta = 1;
  oneof msg {
    Ping ping = 2;
    Pong pong = 3;
    Inv inv = 4;
    GetData getdata = 5;
    Tx tx = 6;
    Headers headers = 7;
    Addr addr = 8;
    AddrV2 addrv2 = 9;
    FeeFilter feefilter = 10;
    GetHeaders getheaders = 11;
    GetBlocks getblocks = 12;
    Version version = 13;
    NotFound notfound = 14;
    Reject reject = 15;
    CompactBlock compactblock = 16;
    SendCompact sendcompact = 17;
    Block block = 18;
    GetBlockTxn getblocktxn = 19;
    BlockTxn blocktxn = 20;
    Alert alert = 21;
    FilterAdd filteradd = 22;
    FilterLoad filterload = 23;
    GetCFCheckpt getcfcheckpt = 24;
    CFHeaders cfheaders = 25;
    CFilter cfilter = 26;
    CFCheckpt cfcheckpt = 27;
    GetCFHeaders getcfheaders = 28;
    GetCFilter getcfilter = 29;
    MerkleBlock merkleblock = 30;
    Unknown unknown = 31;

    // empty messages:
    bool verack = 32; // always true
    bool sendheaders = 33; // always true
    bool getaddr = 34; // always true
    bool mempool = 35; // always true
    bool wtxidrelay = 36; // always true
    bool sendaddrv2 = 37; // always true

    // A BIP37 "filterclear" message.
    bool filterclear = 38; // always true
  }
}

// A "ping" message.
message Ping {
  fixed64 value = 1; // Random value send with the ping. The reply should send the same value back.
}

// A "pong" message.
message Pong {
  fixed64 value = 1; // Random value originally received via the ping.
}

// A "inv" message.
message Inv {
  repeated InventoryItem items = 1;
}

// A Inv(entory) item primitve
message InventoryItem {
  oneof item {
    bytes transaction = 1;
    bytes block = 2;
    // TODO: Why does rust bitcoin have a WTx and WitnessTransaction?
    bytes wtx = 3;
    bytes witness_transaction = 4;
    bytes witness_block = 5;
    bytes compact_block = 6;
    UnknownItem unknown = 7;
    bool error = 15; // always true
  }
}

// Details about an unknown inventory message.
message UnknownItem {
  uint32 inv_type = 1;
  bytes hash = 2;
}

// A "notfound" message.
message NotFound {
  repeated InventoryItem items = 1;
}

// A "cmpctblock" message.
message CompactBlock {
  BlockHeader header = 1;
  uint64 nonce = 2;
  repeated bytes short_ids = 3;
  repeated PrefilledTransaction transactions = 4;
}

// A BIP-152 prefilled transaction primtive.
message PrefilledTransaction {
  uint32 diff_index = 1; // differentially encoded index
  Transaction tx = 2;
}

// A transaction primitive.
message Transaction {
  bytes txid = 1;
  bytes wtxid = 2;
  optional bytes raw = 3;
}

// A "tx" message.
message Tx {
  Transaction tx = 1;
}

// A "getdata" message.
message GetData {
  repeated InventoryItem items = 1;
}

// A "headers" message.
message Headers {
  repeated BlockHeader headers = 1;
}

// A "getblocktxn" message.
message GetBlockTxn {
  bytes block_hash = 1;
  repeated uint64 tx_indexes = 2; // proper indexes - not encoded differentially.
}

// A "blocktxn" message.
message BlockTxn {
  bytes block_hash = 1;
  repeated Transaction transactions = 2;
}

// A "alert" message.
message Alert {
  bytes alert = 1;
}

// A block header primitive
message BlockHeader {
  sint32 version = 1;
  bytes prev_blockhash = 2;
  bytes merkle_root = 3;
  uint32 time = 4;
  uint32 bits = 5;
  uint32 nonce = 6;
  bytes hash = 7;
}

// A "addr" message.
message Addr {
  repeated Address addresses = 1;
}

// A "addrv2" message.
message AddrV2 {
  repeated Address addresses = 1;
}

// An address message primitve for both "addr" (v1) and "addrv2" messages.
message Address {
  uint32 timestamp = 1;
  NetAddress address = 2;
  uint64 services = 3;
  uint32 port = 4;
}

// A network address primitve.
message NetAddress {
  oneof AddrType {
    string ipv4 = 1;
    string ipv6 = 2;
    string torv2 = 3;
    string torv3 = 4;
    string i2p = 5;
    string cjdns = 6;
    UnknownNetAddress unknown = 7;
  }
}

// A primitive for an unknown network address with it's network identifier.
message UnknownNetAddress {
  uint32 id = 1;
  bytes address = 2;
};

// A "reject" message.
message Reject {
  string rejected_command = 1;
  enum RejectReason {
    MALFORMED = 0;
    INVALID = 1;
    OBSOLETE = 2;
    DUPLICATE = 3;
    NONSTANDARD = 4;
    DUST = 5;
    FEE = 6;
    CHECKPOINT = 7;
  }
  RejectReason reason = 2;
  string reason_details = 3;
  bytes hash = 4;
}

// A "sendcmpct" message.
message SendCompact {
  bool send_compact = 1;
  uint64 version = 2;
}

// A "feefilter" message.
message FeeFilter {
  sint64 fee = 1;
}

// A "getheaders" message.
message GetHeaders {
  uint32 version = 1;
  repeated bytes hashes = 2;
  bytes stop_hash = 3;
}

// A "getblocks" message.
message GetBlocks {
  uint32 version = 1;
  repeated bytes hashes = 2;
  bytes stop_hash = 3;
}

// A "version" message.
message Version {
  uint32 version = 1;
  uint64 services = 2;
  sint64 timestamp = 3;
  Address receiver = 4;
  Address sender = 5;
  uint64 nonce = 6;
  string user_agent = 7;
  sint32 start_height = 8;
  bool relay = 9;
}

// A "block" message.
message Block {
  BlockHeader header = 1;
  repeated Transaction transactions = 2;
}

// A BIP37 "filteradd" message.
message FilterAdd {
  bytes filter = 1;
}

// A BIP37 "filterload" message.
message FilterLoad {
  bytes filter = 1;
  uint32 hash_funcs = 2;
  uint32 tweak = 3;
  enum BloomFlags {
    None = 0;
    All = 1;
    PubkeyOnly = 2;
  };
  BloomFlags flags = 4;
}

// A BIP157 "getcfcheckpt" message.
message GetCFCheckpt {
  uint32 filter_type = 1;
  bytes stop_hash = 2;
}

// A BIP157 "cfcheckpt" message.
message CFCheckpt {
  uint32 filter_type = 1;
  bytes stop_hash = 2;
  repeated bytes filter_headers = 3;
}


// A BIP157 "getcfheaders" message.
message GetCFHeaders {
  uint32 filter_type = 1;
  uint32 start_height = 2;
  bytes stop_hash = 3;
}

// A BIP157 "cfheaders" message.
message CFHeaders {
  uint32 filter_type = 1;
  bytes stop_hash = 2;
  bytes previous_filter_header = 3;
  repeated bytes filter_hashes = 4;
}

// A BIP157 "getcfilter" message.
message GetCFilter {
  uint32 filter_type = 1;
  uint32 start_height = 2;
  bytes stop_hash = 3;
}

// A BIP157 "cfilter" message.
message CFilter {
  uint32 filter_type = 1;
  bytes block_hash = 2;
  bytes filter = 3;
}

// A "merkleblock" message.
message MerkleBlock {
  BlockHeader header = 1;
  uint32 num_transactions = 2;
  repeated bool bits = 3;
  repeated bytes hashes = 4;
}

// A message that's not implemented in rust-bitcoin.
message Unknown {
  string command = 1;
  bytes payload = 2;
}
